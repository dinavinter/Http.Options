name: release
on:
  workflow_dispatch:
  push:
    branches:
      - "beta"
      - "prerelease"
      - "master"


env:
  PROJECT_PATH: 'Http.Client.Options/Http.Client.Options.csproj'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_PUSH_URL: ${{ secrets.NUGET_PUSH_URL }}
  NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
  build_artifact: build-${{github.ref_name}}-${{github.sha}}
  test_artifact: test-${{github.ref_name}}-${{github.sha}}

jobs:
  build:
    uses: './.github/workflows/build.yml'
    id: build
    with:
      build_artifact: build-${{github.ref_name}}-${{github.sha}}
      test_artifact: build-${{github.ref_name}}-${{github.sha}}
      retention: 5
    outputs:
      build_artifact: build-${{github.ref_name}}-${{github.sha}}
      test_artifact: build-${{github.ref_name}}-${{github.sha}}

  release:
    needs: build
    name: release
    strategy:
      max-parallel: 1
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{jobs.build.outputs.build_artifact}}
          path: ${{ github.workspace }}
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        id: setup
        
      - run: echo '${{ steps.setup.outputs.dotnet-version }}'
        
      - name: Install dependencies
        run: dotnet restore
        
      - name: Semantic Release
        id: release
        uses: cycjimmy/semantic-release-action@v3 
        with:
          # You can specify specifying version range for the extra plugins if you prefer.
          extra_plugins: |
            @droidsolutions-oss/semantic-release-update-file
            @droidsolutions-oss/semantic-release-nuget
            @semantic-release/git
            @semantic-release/github

     #          @semantic-release/exec


        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
          PROJECT_PATH: ${{ env.PROJECT_PATH }}
          PACKAGE_OUTPUT_DIRECTORY: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
          TARGET_FRAMEWORKS: ${{ env.TARGET_FRAMEWORKS }}
            
            #      - name: Install dependencies
#        run: dotnet restore
#
#      - name: Build
#        run: dotnet build --configuration Release --no-restore
#          
#          
          
          # - name: 'Pack & Publish project'
      #   if: ${{ steps.release.outputs.new_release_version }}
      #   run: |
      #     dotnet clean
      #     dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --include-symbols --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
      #     dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg -k ${{ secrets.NUGET_TOKEN }} -s ${{ env.NUGET_PUSH_URL }}

                    
