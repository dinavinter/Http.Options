name: release
on:
  workflow_dispatch:
  push:
    branches:
      - "beta"
      - "prerelease"
      - "master"


env:
  PROJECT_PATH: 'Http.Client.Options/Http.Client.Options.csproj'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_PUSH_URL: ${{ secrets.NUGET_PUSH_URL }}
  NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
  build_artifact: build-${{github.ref_name}}-${{github.sha}}
  test_artifact: test-${{github.ref_name}}-${{github.sha}}
  release_name: ${{github.ref_name}}
  
jobs:
  version:
    runs-on: ubuntu-latest
    env:
      release_name: ${{github.ref_name}}
      branch_name: ${{github.sha}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2  
     
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v3
        with:
          tag_format: 'check-v${version}'
          dry_run: true
          # You can specify specifying version range for the extra plugins if you prefer.
          extra_plugins: |
            @droidsolutions-oss/semantic-release-update-file
             [
                "@semantic-release/git",
                {
                  "assets": [
                    "VERSION"
                  ],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
            ]
      - name: Set version
        run: echo "VERSION=${{ steps.semantic.outputs.new_version }}" >> $GITHUB_ENV
      
      - name: Set branch_name
        run: echo "branch_name=${{ steps.semantic.outputs.new_release_git_tag }}" >> $GITHUB_ENV
    
      - name: Set tag
        run: |
          echo "pre_rc_tag=${{ steps.semantic.outputs.new_release_git_tag }}" >> $GITHUB_ENV
          echo "build_artifact=build-${{env.pre_rc_tag}} >> $GITHUB_ENV
          echo "test_artifact=test-${{env.pre_rc_tag}} >> $GITHUB_ENV

      - name: Do something when a new release published
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_git_tag }}
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
            token: ${{ secrets.GITHUB_TOKEN }}
            commit-message: "Semantic Release  ${{ env.RELEASE_GIT_TAG }}"
            title: "Semantic Release  ${{ env.RELEASE_GIT_TAG }}"
            body: "${{env.RELEASE_NOTES}}"
            branch: ${{github.ref}}

      - name: Checkout new branch for the release version
        run: git checkout -b ${{env.branch_name}}
      - name: Push new branch
        run: git push  ${{env.branch_name}} --set-upstream origin ${{env.branch_name}}

      
    outputs: 
      new_release_git_tag: ${{steps.semantic.outputs.new_release_git_tag}}
      

  build:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: './.github/workflows/build.yml'
        with:
          ref: ${{env.pre_rc_tag}}
          build_artifact: ${{env.build_artifact}}
          test_artifact: ${{env.test_artifact}}
          retention: 5
      
    
  release:
    needs: build
    name: release
    strategy:
      max-parallel: 1
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{env.build_artifact}}
          path: ${{ github.workspace }}
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        id: setup
        
      - run: echo '${{ steps.setup.outputs.dotnet-version }}'
        
      - name: Install dependencies
        run: dotnet restore
        
      - name: Semantic Release
        id: release
        uses: cycjimmy/semantic-release-action@v3 
        with:
          # You can specify specifying version range for the extra plugins if you prefer.
          extra_plugins: |
            @droidsolutions-oss/semantic-release-update-file
            @droidsolutions-oss/semantic-release-nuget
            @semantic-release/git
            @semantic-release/github

     #          @semantic-release/exec


        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
          PROJECT_PATH: ${{ env.PROJECT_PATH }}
          PACKAGE_OUTPUT_DIRECTORY: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
          TARGET_FRAMEWORKS: ${{ env.TARGET_FRAMEWORKS }}
            
            #      - name: Install dependencies
#        run: dotnet restore
#
#      - name: Build
#        run: dotnet build --configuration Release --no-restore
#          
#          
          
          # - name: 'Pack & Publish project'
      #   if: ${{ steps.release.outputs.new_release_version }}
      #   run: |
      #     dotnet clean
      #     dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --include-symbols --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
      #     dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg -k ${{ secrets.NUGET_TOKEN }} -s ${{ env.NUGET_PUSH_URL }}

                    
